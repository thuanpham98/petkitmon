{"version":3,"mappings":"iGAEO,MAAMA,CAAkB,CAC7B,MAAa,oBAAqB,CAC5B,IAGF,OAAO,MAFM,MAAMC,EAAM,IAAI,gCAAgC,GAE3C,WACXC,EAAO,CACd,QAAQ,MAAMA,CAAK,CACrB,CACF,CAEA,MAAa,qBAAqBC,EAAc,CAC1C,IAEF,OADa,MAAMF,EAAM,IAAI,kCAAkCE,CAAI,EAAE,GACzD,KAAK,cACVD,EAAO,CACd,QAAQ,MAAMA,CAAK,CACrB,CACF,CAEA,MAAa,YAAY,CACvB,OAAAE,EACA,SAAAC,CAAA,EAIC,CACG,IAIF,OAHa,MAAMJ,EAAM,IACvB,4CAA4CG,CAAM,UAAUC,CAAQ,KAE1D,WACLH,EAAO,CACd,QAAQ,MAAMA,CAAK,CACrB,CACF,CACF,CCnCO,MAAMI,CAAsC,CACzC,QAER,aAAc,CACP,aAAU,IAAIN,CACrB,CACA,MAAa,kBAAiD,CAE5D,OADa,MAAM,KAAK,QAAQ,mBAAmB,GACvC,QAAQ,IAAKO,IAChB,CACL,KAAMA,EAAE,KACR,IAAKA,EAAE,KAEV,CACH,CAEA,MAAa,mBAAmBJ,EAA4C,CAEnE,OADM,MAAM,KAAK,QAAQ,qBAAqBA,CAAI,GAC7C,IAAKI,IACR,CACL,KAAMA,EAAE,QAAQ,KAChB,IAAKA,EAAE,QAAQ,KAElB,CACH,CAEA,MAAa,aAAa,CACxB,OAAAH,EACA,SAAAC,CAAA,EAOC,CACD,MAAMG,EAAO,MAAM,KAAK,QAAQ,YAAY,CAC1C,OAAAJ,EACA,SAAAC,CAAA,CACD,EACM,OACL,KAAMG,EAAK,QACX,MAAOA,EAAK,MAEhB,CACF,CC5CO,MAAMC,UAAsBC,CAAS,CAC1B,IAEA,KAEhB,aAAc,CACN,QACD,SAAM,OAAO,eAAe,EAG5B,UAAO,IAAIJ,EAGVL,EAAA,SAAS,QAAU,IAAM,GACjC,CAEO,SAAkB,CAChB,YAAK,IAAI,aAAe,eACjC,CACF,ogCCnBY,IAAAU,OAEVA,EAAA,KAAO,IAEPA,EAAA,cAAgB,kBAJNA,OAAA,ICJL,MAAMC,CAAY,CACvB,OAAO,KAAe,gCACtB,OAAO,SAAmB,aAC5B,CCGA,MAAMC,EAAMC,EAAA,KAAK,IAAMC,EAAA,WAAO,uBAAO,EAAC,sBAEhCC,EAAeF,EAAA,KAAK,UAAM,OAAO,uBAAkB,EAAC,sBACpDG,EAAoBH,EAAA,KAAK,IAAMC,EAAA,WAAO,uBAAwB,EAAC,sBAE9D,SAASG,EAAgBC,EAAqC,CAC5D,OAAAC,EACL,CACE,CACE,KAAMT,EAAY,KAClB,QACEU,EAAA,IAACC,EAAa,UAAU,CAAE,QAAAH,CAAA,EACxB,SAAAE,EAAA,IAACE,EACC,mBAAAF,EAAA,IAACR,EAAI,GACP,GACF,EAEF,SAAU,CACR,CACE,MAAO,GACP,QACEQ,MAACE,WACC,UAAAF,MAACL,GAAa,GAChB,CAEJ,EACA,CACE,KAAML,EAAY,cAClB,QACEU,MAACE,WACC,UAAAF,MAACJ,GAAkB,GACrB,CAEJ,CACF,CACF,CACF,EACA,CAAE,SAAUL,EAAY,QAAS,EAErC,CCtCA,MAAMY,EAAY,IAAIC,IAA6B,IAAI,IAAIhB,CAAe,EACpEiB,EAASR,EAAgBM,CAAS,EAExCG,EAAS,WAAW,SAAS,eAAe,MAAM,CAAE,EAAE,OACpDN,MAACO,GAAe,OAAAF,EAAgB,CAClC","names":["PokemonController","axios","error","type","offset","pageSize","PokemonRepository","d","resp","AppRepository","RdModule","NavlinkPath","Environment","App","lazy","__vitePreload","PokemonsPage","PokemonDetailPage","appRouterConfig","modules","createBrowserRouter","jsx","RdAppExtends","Suspense","rdManager","RdModulesManager","router","ReactDOM","RouterProvider"],"sources":["../src/infrastructures/pokemon-api/PokemonController.ts","../src/applications/repositories/PokemonRepository.ts","../src/applications/services/app-repository.ts","../src/applications/services/router-config.ts","../src/applications/services/environment.ts","../src/router.tsx","../src/main.tsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport class PokemonController {\r\n  public async getListPokemonType() {\r\n    try {\r\n      const resp = await axios.get(\"https://pokeapi.co/api/v2/type\");\r\n\r\n      return await resp.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  public async getListPokemonByType(type: string) {\r\n    try {\r\n      const resp = await axios.get(`https://pokeapi.co/api/v2/type/${type}`);\r\n      return resp.data.pokemon;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  public async getPokemons({\r\n    offset,\r\n    pageSize,\r\n  }: {\r\n    offset: number;\r\n    pageSize: number;\r\n  }) {\r\n    try {\r\n      const resp = await axios.get(\r\n        `https://pokeapi.co/api/v2/pokemon?offset=${offset}&limit=${pageSize}`,\r\n      );\r\n      return resp.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n}\r\n","import { IPokemon, PokemonItemEntity, PokemonsType } from \"@/domains/pokemons\";\r\nimport { PokemonController } from \"@/infrastructures/pokemon-api/PokemonController\";\r\n\r\nexport class PokemonRepository implements IPokemon {\r\n  private _client: PokemonController;\r\n\r\n  constructor() {\r\n    this._client = new PokemonController();\r\n  }\r\n  public async listPokemonTypes(): Promise<Array<PokemonsType>> {\r\n    const resp = await this._client.getListPokemonType();\r\n    return resp.results.map((d: { name: string; url: string }) => {\r\n      return {\r\n        name: d.name,\r\n        url: d.url,\r\n      };\r\n    });\r\n  }\r\n\r\n  public async listPokemonsByType(type: string): Promise<PokemonItemEntity[]> {\r\n    const resp = await this._client.getListPokemonByType(type);\r\n    return resp.map((d: { pokemon: { name: string; url: string } }) => {\r\n      return {\r\n        name: d.pokemon.name,\r\n        url: d.pokemon.url,\r\n      };\r\n    });\r\n  }\r\n\r\n  public async listPokemons({\r\n    offset,\r\n    pageSize,\r\n  }: {\r\n    offset: number;\r\n    pageSize: number;\r\n  }): Promise<{\r\n    total: number;\r\n    data: Array<PokemonItemEntity>;\r\n  }> {\r\n    const resp = await this._client.getPokemons({\r\n      offset: offset,\r\n      pageSize: pageSize,\r\n    });\r\n    return {\r\n      data: resp.results,\r\n      total: resp.count,\r\n    };\r\n  }\r\n}\r\n","import { RdModule } from \"@radts/reactjs\";\r\nimport axios from \"axios\";\r\nimport { PokemonRepository } from \"../repositories/PokemonRepository\";\r\n\r\nexport class AppRepository extends RdModule {\r\n  public readonly key: symbol;\r\n\r\n  public readonly poke: PokemonRepository;\r\n\r\n  constructor() {\r\n    super();\r\n    this.key = Symbol(\"AppRepository\");\r\n\r\n    // core bank\r\n    this.poke = new PokemonRepository();\r\n\r\n    // asios\r\n    axios.defaults.timeout = 120 * 1000;\r\n  }\r\n\r\n  public getName(): string {\r\n    return this.key.description ?? \"AppRepository\";\r\n  }\r\n}\r\n","/**\r\n * NalinkPath is enum hold all router in app\r\n */\r\n\r\nexport enum NavlinkPath {\r\n  // root\r\n  root = `/`,\r\n\r\n  detailPokemon = \"/detail-pokemon\",\r\n}\r\n","export class Environment {\r\n  static host: string = import.meta.env.PETKITMON_HOST;\r\n  static basePath: string = import.meta.env.PETKITMON_BASE_PATH;\r\n}\r\n","import { Suspense, lazy } from \"react\";\r\nimport { createBrowserRouter } from \"react-router-dom\";\r\nimport { NavlinkPath } from \"./applications/services/router-config\";\r\nimport { Environment } from \"./applications/services/environment\";\r\nimport { RdAppExtends, RdModule, RdModulesManager } from \"@radts/reactjs\";\r\n\r\nconst App = lazy(() => import(\"@/App\"));\r\n\r\nconst PokemonsPage = lazy(() => import(\"@/pages/pokemons\"));\r\nconst PokemonDetailPage = lazy(() => import(\"@/pages/detail-pokemon\"));\r\n\r\nexport function appRouterConfig(modules: RdModulesManager<RdModule>) {\r\n  return createBrowserRouter(\r\n    [\r\n      {\r\n        path: NavlinkPath.root,\r\n        element: (\r\n          <RdAppExtends appProps={{ modules: modules }}>\r\n            <Suspense>\r\n              <App />\r\n            </Suspense>\r\n          </RdAppExtends>\r\n        ),\r\n        children: [\r\n          {\r\n            index: true,\r\n            element: (\r\n              <Suspense>\r\n                <PokemonsPage />\r\n              </Suspense>\r\n            ),\r\n          },\r\n          {\r\n            path: NavlinkPath.detailPokemon,\r\n            element: (\r\n              <Suspense>\r\n                <PokemonDetailPage />\r\n              </Suspense>\r\n            ),\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    { basename: Environment.basePath },\r\n  );\r\n}\r\n","import ReactDOM from \"react-dom/client\";\r\nimport \"./index.css\";\r\nimport { RdModule, RdModulesManager } from \"@radts/reactjs\";\r\nimport { AppRepository } from \"./applications/services/app-repository\";\r\nimport { appRouterConfig } from \"./router\";\r\nimport { RouterProvider } from \"react-router-dom\";\r\n\r\nconst rdManager = new RdModulesManager<RdModule>().use(new AppRepository());\r\nconst router = appRouterConfig(rdManager);\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\r\n  <RouterProvider router={router} />,\r\n);\r\n"],"file":"petkitmon.js"}